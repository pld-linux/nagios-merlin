#!/bin/sh
#
# Start / Stop the Merlin daemon
#
# chkconfig:	2345 90 10
#
# description: Merlin is an event-distribution system for Nagios
#
# processname:	merlind
# config:
# pidfile:
#
# $Id$

# Source function library
. /etc/rc.d/init.d/functions

# Get network config
. /etc/sysconfig/network

# Check that networking is up.
if is_yes "${NETWORKING}"; then
	if [ ! -f /var/lock/subsys/network -a "$1" != stop -a "$1" != status ]; then
		msg_network_down "Merlin Daemon"
		exit 1
	fi
else
	exit 0
fi

# Get service config - may override defaults
[ -f /etc/sysconfig/merlind ] && . /etc/sysconfig/merlind

daemon=/usr/sbin/merlind
pidfile="/var/run/merlind.pid"
config_file=/etc/nagios/merlin.conf
nagios_cfg=/etc/nagios/nagios.cfg
broker_module=/usr/lib/nagios/merlin/merlin.so

# configtest itself
# must return non-zero if check failed
# output is discarded if checkconfig is ran without details
configtest() {
	local val ret=0

	# check Nagios setup
	val=$(awk -F= '/^broker_module=.*merlin.so/{print $2}' $nagios_cfg)
	val=${val% *}
	if [ -z "$val" ]; then
		echo >&2 "'broker_module' does not contain merlin.so in $nagios_cfg"
		echo >&2 "Add to Nagios config:"
		echo >&2 "broker_module=$broker_module $config_file"
		ret=1
	fi

	# check that it exists
	if [ -n "$val" -a ! -f "$val" ]; then
		echo >&2 "broker_module $val does not exist, try setting it to $broker_module"
		ret=1
	fi

	return $ret
}

# wrapper for configtest
checkconfig() {
	local details=${1:-0}

	if [ $details = 1 ]; then
		# run config test and display report (status action)
		show "Checking %s configuration" "Merlin Daemon"; busy
		local out
		out=$(configtest 2>&1)
		RETVAL=$?
		if [ $RETVAL = 0 ]; then
			ok
		else
			fail
		fi
		[ "$out" ] && echo >&2 "$out"
	else
		# run config test and abort with nice message if failed
		# (for actions checking status before action).
		configtest >/dev/null 2>&1
		RETVAL=$?
		if [ $RETVAL != 0 ]; then
			show "Checking %s configuration" "Merlin Daemon"; fail
			nls 'Configuration test failed. See details with %s "checkconfig"' $0
			exit $RETVAL
		fi
	fi
}

start() {
	# Check if the service is already running?
	if [ -f /var/lock/subsys/merlind ]; then
		msg_already_running "Merlin Daemon"
		return
	fi

	checkconfig
	msg_starting "Merlin Daemon"
	daemon $daemon -c "$config_file"
	RETVAL=$?
	[ $RETVAL -eq 0 ] && touch /var/lock/subsys/merlind
}

stop() {
	if [ ! -f /var/lock/subsys/merlind ]; then
		msg_not_running "Merlin Daemon"
		return
	fi

	# Stop daemons.
	msg_stopping "Merlin Daemon"; busy
	$daemon -c "$config_file" -k && ok || fail
	rm -f /var/lock/subsys/merlind
}

condrestart() {
	if [ ! -f /var/lock/subsys/merlind ]; then
		msg_not_running "Merlin Daemon"
		RETVAL=$1
		return
	fi

	checkconfig
	stop
	start
}

RETVAL=0
# See how we were called.
case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  restart)
	checkconfig
	stop
	start
	;;
  try-restart)
	condrestart 0
	;;
  force-reload)
	condrestart 7
	;;
  checkconfig|configtest)
	checkconfig 1
	;;
  status)
	status --pidfile $pidfile merlind
	RETVAL=$?
	;;
  *)
	msg_usage "$0 {start|stop|restart|try-restart|force-reload|checkconfig|status}"
	exit 3
esac

exit $RETVAL
